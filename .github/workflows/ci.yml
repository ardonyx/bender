name: CI

on:
  push:
  pull_request:

jobs:
  # Build test ensures debug and release builds compile and pass testing. Artifacts will be uploaded
  # to this action which can be consumed by other jobs.
  build-and-test:
    if: (github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id)
      && (contains(toJson(github.event.commits), '[ci skip]') == false 
      && contains(toJson(github.event.commits), '[skip ci]') == false)
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
         
      - name: Setup .NET Core SDK
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      # Make sure debug build will compile without warnings    
      - name: Debug Build
        run: dotnet build --nologo --configuration=Debug -p:TreatWarningsAsErrors=true Bender.Core
        
      # Make sure release build will compile without warnings      
      - name: Release Build
        run: dotnet build --nologo --configuration=Release -p:TreatWarningsAsErrors=true Bender.Core
        
      - name: Tests
        run: dotnet test --nologo --configuration=Release ./Bender.Core.Tests      

      - name: Create NuGet package
        if: startsWith(github.ref, 'refs/tags/v') && runner.os == 'Linux'
        run: dotnet pack --nologo --configuration=Release --no-build Bender.Core -o build
        
      - name: Create Bender Windows CLI
        if: startsWith(github.ref, 'refs/tags/v') && runner.os == 'Linux'
        run: dotnet publish --nologo --runtime win-x64 /p:PublishSingleFile=true --configuration=Release Bender -o build

      - name: Upload NuGet package artifact
        if: startsWith(github.ref, 'refs/tags/v') && runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: nuget-package
          path: ./build/*.*nupkg
          
      - name: Upload CLI package artifact
        if: startsWith(github.ref, 'refs/tags/v') && runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: bender-tools
          path: ./build/*.*exe           
  
  # Publish library to GPR          
  publish-nuget:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') 
    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v2
        with:
          name: nuget-package
          
      # Must use nuget as well to workaround API key non-sense with dotnet tool    
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
        with:
          nuget-version: latest

      - name: Set NuGet Source
        run: nuget sources Add -Name "GPR" -Source "https://nuget.pkg.github.com/ardonyx/index.json" -UserName ${{ secrets.USER }} -Password ${{ secrets.GHPAT }}

      - name: Set API key
        run: nuget setapikey ${{ secrets.GHPAT }} -Source "https://nuget.pkg.github.com/ardonyx/index.json"   
        
      - name: Publish to GPR
        run: nuget push *.nupkg -Source "GPR"
  
  # Draft a new release with assets      
  make-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v2
        with:
          name: bender-tools
                    
      - uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          gzip: false
          files: >
            bender.win64.exe